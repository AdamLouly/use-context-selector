{"version":3,"file":"index.esm.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react';\n\n// utils\n\nconst forcedReducer = state => state + 1;\nconst useForceUpdate = () => React.useReducer(forcedReducer, 0)[1];\n\nconst calculateChangedBits = () => 0;\n\nconst identity = x => x;\n\nconst CONTEXT_LISTENERS = Symbol('CONTEXT_LISTENERS');\n\nconst createProvider = (OrigProvider, listeners) => React.memo(({ value, children }) => {\n  React.useLayoutEffect(() => {\n    listeners.forEach(listener => listener(value));\n  }, [value]);\n  return React.createElement(OrigProvider, { value }, children);\n});\n\n// createContext\n\nexport const createContext = (defaultValue) => {\n  const context = React.createContext(defaultValue, calculateChangedBits);\n  const listeners = new Set();\n  // shared listeners (not ideal)\n  context[CONTEXT_LISTENERS] = listeners;\n  // hacked provider\n  context.Provider = createProvider(context.Provider, listeners);\n  // no support for consumer\n  delete context.Consumer;\n  return context;\n};\n\n// useContextSelector\n\nexport const useContextSelector = (context, selector) => {\n  const listeners = context[CONTEXT_LISTENERS];\n  if (!listeners) {\n    throw new Error('useContextSelector requires special context');\n  }\n  const forceUpdate = useForceUpdate();\n  const value = React.useContext(context);\n  const selected = selector(value);\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    ref.current = { selector, value, selected };\n  });\n  React.useLayoutEffect(() => {\n    const callback = (nextValue) => {\n      try {\n        if (ref.current.value === nextValue\n          || Object.is(ref.current.selected, ref.current.selector(nextValue))) {\n          return;\n        }\n      } catch (e) {\n        // ignored (stale props or some other reason)\n      }\n      ref.current.value = nextValue;\n      forceUpdate();\n    };\n    listeners.add(callback);\n    return () => {\n      listeners.delete(callback);\n    };\n  }, [forceUpdate, listeners]);\n  return selected;\n};\n\n// useContext\n\nexport const useContext = context => useContextSelector(context, identity);\n"],"names":["forcedReducer","state","calculateChangedBits","identity","x","CONTEXT_LISTENERS","Symbol","createContext","defaultValue","context","React","listeners","Set","Provider","OrigProvider","memo","value","children","useLayoutEffect","forEach","listener","createElement","createProvider","Consumer","useContextSelector","selector","Error","forceUpdate","useReducer","useContext","selected","ref","useRef","current","callback","nextValue","Object","is","e","add","delete"],"mappings":"qBAIA,IAAMA,EAAgB,SAAAC,UAASA,EAAQ,GAGjCC,EAAuB,qBAEvBC,EAAW,SAAAC,UAAKA,GAEhBC,EAAoBC,OAAO,qBAWpBC,EAAgB,SAACC,GAC5B,IAAMC,EAAUC,EAAMH,cAAcC,EAAcN,GAC5CS,EAAY,IAAIC,IAOtB,OALAH,EAAQJ,GAAqBM,EAE7BF,EAAQI,SAfa,SAACC,EAAcH,UAAcD,EAAMK,KAAK,gBAAGC,IAAAA,MAAOC,IAAAA,SAIvE,OAHAP,EAAMQ,gBAAgB,WACpBP,EAAUQ,QAAQ,SAAAC,UAAYA,EAASJ,MACtC,CAACA,IACGN,EAAMW,cAAcP,EAAc,CAAEE,MAAAA,GAASC,KAWjCK,CAAeb,EAAQI,SAAUF,UAE7CF,EAAQc,SACRd,GAKIe,EAAqB,SAACf,EAASgB,GAC1C,IAAMd,EAAYF,EAAQJ,GAC1B,IAAKM,EACH,UAAUe,MAAM,+CAElB,IAAMC,EApCqBjB,EAAMkB,WAAW5B,EAAe,GAAG,GAqCxDgB,EAAQN,EAAMmB,WAAWpB,GACzBqB,EAAWL,EAAST,GACpBe,EAAMrB,EAAMsB,OAAO,MAsBzB,OArBAtB,EAAMQ,gBAAgB,WACpBa,EAAIE,QAAU,CAAER,SAAAA,EAAUT,MAAAA,EAAOc,SAAAA,KAEnCpB,EAAMQ,gBAAgB,WACpB,IAAMgB,EAAW,SAACC,GAChB,IACE,GAAIJ,EAAIE,QAAQjB,QAAUmB,GACrBC,OAAOC,GAAGN,EAAIE,QAAQH,SAAUC,EAAIE,QAAQR,SAASU,IACxD,OAEF,MAAOG,IAGTP,EAAIE,QAAQjB,MAAQmB,EACpBR,KAGF,OADAhB,EAAU4B,IAAIL,cAEZvB,EAAU6B,OAAON,KAElB,CAACP,EAAahB,IACVmB,GAKID,EAAa,SAAApB,UAAWe,EAAmBf,EAASN"}