{"version":3,"file":"index.esm.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst CONTEXT_LISTENERS = Symbol('CONTEXT_LISTENERS');\r\n\r\nconst createProvider = (OrigProvider, listeners) => React.memo(({ value, children }) => {\r\n  // we call listeners in render intentionally.\r\n  // listeners are not technically pure, but\r\n  // otherwise we can't get benefits from concurrent mode.\r\n  // we make sure to work with double or more invocation of listeners.\r\n  listeners.some(listener => {\r\n    listener(value)\r\n  });\r\n  return React.createElement(OrigProvider, { value }, children);\r\n});\r\n\r\n// createContext\r\n\r\nexport const createContext = (defaultValue) => {\r\n  const context = React.createContext(defaultValue, () => 0);\r\n  // shared listeners (not ideal)\r\n  context[CONTEXT_LISTENERS] = new Set();\r\n  // hacked provider\r\n  context.Provider = createProvider(context.Provider, context[CONTEXT_LISTENERS]);\r\n  // no support for consumer\r\n  delete context.Consumer;\r\n  return context;\r\n};\r\n\r\n// useContextSelector\r\n\r\nexport const useContextSelector = (context, selector) => {\r\n  const listeners = context[CONTEXT_LISTENERS];\r\n  if (!listeners) {\r\n    throw new Error('useContextSelector requires special context');\r\n  }\r\n  const forceUpdate = React.useReducer(state => state + 1, 0)[1];\r\n  const value = React.useContext(context);\r\n  const selected = selector(value);\r\n  const ref = React.useRef(null);\r\n  React.useLayoutEffect(() => {\r\n    ref.current = { selector, value, selected };\r\n  });\r\n  React.useLayoutEffect(() => {\r\n    const callback = (nextValue) => {\r\n      try {\r\n        if (ref.current.value === nextValue\r\n          || Object.is(ref.current.selected, ref.current.selector(nextValue))) {\r\n          return;\r\n        }\r\n      } catch (e) {\r\n        // ignored (stale props or some other reason)\r\n      }\r\n      forceUpdate();\r\n    };\r\n    listeners.add(callback);\r\n    return () => {\r\n      listeners.delete(callback);\r\n    };\r\n  }, [forceUpdate, listeners]);\r\n  return selected;\r\n};\r\n\r\n// useContext\r\n\r\nexport const useContext = context => useContextSelector(context, x => x);\r\n"],"names":["CONTEXT_LISTENERS","Symbol","createContext","defaultValue","OrigProvider","listeners","context","React","Set","Provider","memo","value","children","some","listener","createElement","Consumer","useContextSelector","selector","Error","forceUpdate","useReducer","state","useContext","selected","ref","useRef","useLayoutEffect","current","callback","nextValue","Object","is","e","add","delete","x"],"mappings":"qBAEA,IAAMA,EAAoBC,OAAO,qBAepBC,EAAgB,SAACC,GAC5B,IAdsBC,EAAcC,EAc9BC,EAAUC,EAAML,cAAcC,EAAc,sBAOlD,OALAG,EAAQN,GAAqB,IAAIQ,IAEjCF,EAAQG,UAlBcL,EAkBYE,EAAQG,SAlBNJ,EAkBgBC,EAAQN,GAlBVO,EAAMG,KAAK,gBAAGC,IAAAA,MAAOC,IAAAA,SAQvE,OAHAP,EAAUQ,KAAK,SAAAC,GACbA,EAASH,KAEJJ,EAAMQ,cAAcX,EAAc,CAAEO,MAAAA,GAASC,aAY7CN,EAAQU,SACRV,GAKIW,EAAqB,SAACX,EAASY,GAC1C,IAAMb,EAAYC,EAAQN,GAC1B,IAAKK,EACH,UAAUc,MAAM,+CAElB,IAAMC,EAAcb,EAAMc,WAAW,SAAAC,UAASA,EAAQ,GAAG,GAAG,GACtDX,EAAQJ,EAAMgB,WAAWjB,GACzBkB,EAAWN,EAASP,GACpBc,EAAMlB,EAAMmB,OAAO,MAqBzB,OApBAnB,EAAMoB,gBAAgB,WACpBF,EAAIG,QAAU,CAAEV,SAAAA,EAAUP,MAAAA,EAAOa,SAAAA,KAEnCjB,EAAMoB,gBAAgB,WACpB,IAAME,EAAW,SAACC,GAChB,IACE,GAAIL,EAAIG,QAAQjB,QAAUmB,GACrBC,OAAOC,GAAGP,EAAIG,QAAQJ,SAAUC,EAAIG,QAAQV,SAASY,IACxD,OAEF,MAAOG,IAGTb,KAGF,OADAf,EAAU6B,IAAIL,cAEZxB,EAAU8B,OAAON,KAElB,CAACT,EAAaf,IACVmB,GAKID,EAAa,SAAAjB,UAAWW,EAAmBX,EAAS,SAAA8B,UAAKA"}