{"version":3,"file":"index.umd.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react';\n\nconst CONTEXT_LISTENERS = (\n  process.env.NODE_ENV !== 'production' ? Symbol('CONTEXT_LISTENERS')\n  /* for production */ : Symbol()\n);\n\nconst createProvider = (OrigProvider, listeners) => React.memo(({ value, children }) => {\n  if (process.env.NODE_ENV !== 'production' && process.env.NODE_ENV !== 'test') {\n    // we use layout effect to eliminate warnings.\n    // but, this leads tearing with startTransition.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useLayoutEffect(() => {\n      listeners.forEach((listener) => {\n        listener(value);\n      });\n    });\n  } else {\n    // we call listeners in render for optimization.\n    // although this is not a recommended pattern,\n    // so far this is only the way to make it as expected.\n    // we are looking for better solutions.\n    // https://github.com/dai-shi/use-context-selector/pull/12\n    listeners.forEach((listener) => {\n      listener(value);\n    });\n  }\n  return React.createElement(OrigProvider, { value }, children);\n});\n\n/**\n * This creates a special context for `useContextSelector`.\n * @param {*} defaultValue\n * @returns {React.Context}\n * @example\n * const PersonContext = createContext({ firstName: '', familyName: '' });\n */\nexport const createContext = (defaultValue) => {\n  // make changedBits always zero\n  const context = React.createContext(defaultValue, () => 0);\n  // shared listeners (not ideal)\n  context[CONTEXT_LISTENERS] = new Set();\n  // hacked provider\n  context.Provider = createProvider(context.Provider, context[CONTEXT_LISTENERS]);\n  // no support for consumer\n  delete context.Consumer;\n  return context;\n};\n\n/**\n * This hook returns context selected value by selector.\n * It will only accept context created by `createContext`.\n * It will trigger re-render if only the selected value is referentially changed.\n * @param {React.Context} context\n * @param {Function} selector\n * @returns {*}\n * @example\n * const firstName = useContextSelector(PersonContext, state => state.firstName);\n */\nexport const useContextSelector = (context, selector) => {\n  const listeners = context[CONTEXT_LISTENERS];\n  if (process.env.NODE_ENV !== 'production') {\n    if (!listeners) {\n      throw new Error('useContextSelector requires special context');\n    }\n  }\n  const [, forceUpdate] = React.useReducer((c) => c + 1, 0);\n  const value = React.useContext(context);\n  const selected = selector(value);\n  const ref = React.useRef(null);\n  React.useLayoutEffect(() => {\n    ref.current = {\n      f: selector, // last selector \"f\"unction\n      v: value, // last \"v\"alue\n      s: selected, // last \"s\"elected value\n    };\n  });\n  React.useLayoutEffect(() => {\n    const callback = (nextValue) => {\n      try {\n        if (ref.current.v === nextValue\n          || Object.is(ref.current.s, ref.current.f(nextValue))) {\n          return;\n        }\n      } catch (e) {\n        // ignored (stale props or some other reason)\n      }\n      forceUpdate();\n    };\n    listeners.add(callback);\n    return () => {\n      listeners.delete(callback);\n    };\n  }, [listeners]);\n  return selected;\n};\n\n/**\n * This hook returns the entire context value.\n * Use this instead of React.useContext for consistent behavior.\n * @param {React.Context} context\n * @returns {*}\n * @example\n * const person = useContext(PersonContext);\n */\n// this is not best implemented for performance,\n// but this wouldn't be used very often.\nexport const useContext = (context) => useContextSelector(context, (x) => x);\n"],"names":["CONTEXT_LISTENERS","process","env","NODE_ENV","Symbol","useContextSelector","context","selector","listeners","Error","forceUpdate","React","useReducer","c","value","useContext","selected","ref","useRef","useLayoutEffect","current","f","v","s","callback","nextValue","Object","is","e","add","delete","defaultValue","OrigProvider","createContext","Set","Provider","memo","children","forEach","listener","createElement","Consumer","x"],"mappings":"kRAEA,IAAMA,EACqB,eAAzBC,QAAQC,IAAIC,SAA4BC,OAAO,qBACxBA,SAuDZC,EAAqB,SAACC,EAASC,GAC1C,IAAMC,EAAYF,EAAQN,GAC1B,GAA6B,eAAzBC,QAAQC,IAAIC,WACTK,EACH,UAAUC,MAAM,+CAJmC,IAO9CC,EAAeC,EAAMC,WAAW,SAACC,UAAMA,EAAI,GAAG,MACjDC,EAAQH,EAAMI,WAAWT,GACzBU,EAAWT,EAASO,GACpBG,EAAMN,EAAMO,OAAO,MAyBzB,OAxBAP,EAAMQ,gBAAgB,WACpBF,EAAIG,QAAU,CACZC,EAAGd,EACHe,EAAGR,EACHS,EAAGP,KAGPL,EAAMQ,gBAAgB,WACpB,IAAMK,EAAW,SAACC,GAChB,IACE,GAAIR,EAAIG,QAAQE,IAAMG,GACjBC,OAAOC,GAAGV,EAAIG,QAAQG,EAAGN,EAAIG,QAAQC,EAAEI,IAC1C,OAEF,MAAOG,IAGTlB,KAGF,OADAF,EAAUqB,IAAIL,cAEZhB,EAAUsB,OAAON,KAElB,CAAChB,IACGQ,mBAzDoB,SAACe,GAE5B,IAhCsBC,EAAcxB,EAgC9BF,EAAUK,EAAMsB,cAAcF,EAAc,sBAOlD,OALAzB,EAAQN,GAAqB,IAAIkC,IAEjC5B,EAAQ6B,UApCcH,EAoCY1B,EAAQ6B,SApCN3B,EAoCgBF,EAAQN,GApCVW,EAAMyB,KAAK,gBAAGtB,IAAAA,MAAOuB,IAAAA,SAoBvE,MAnB6B,eAAzBpC,QAAQC,IAAIC,UAAsD,SAAzBF,QAAQC,IAAIC,SAIvDQ,EAAMQ,gBAAgB,WACpBX,EAAU8B,QAAQ,SAACC,GACjBA,EAASzB,OASbN,EAAU8B,QAAQ,SAACC,GACjBA,EAASzB,KAGNH,EAAM6B,cAAcR,EAAc,CAAElB,MAAAA,GAASuB,aAkB7C/B,EAAQmC,SACRnC,gBA6DiB,SAACA,UAAYD,EAAmBC,EAAS,SAACoC,UAAMA"}